
fn countDivisors(n) {
  count := 0
  i := 1
  for i*i < n {
    if n % i == 0 {
      count += 2
    }
    i += 1
  }
  if i*i == n {
    count += 1
  }

  return count
}

fn triangular() {
  t := 0
  pipe range(inf) as i {
    t += i
    yield t
  }
}

result := triangular()
| filter x: countDivisors(x) > 500
| to Number

print(result)
